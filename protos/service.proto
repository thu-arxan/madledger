// Copyright (c) 2020 THU-Arxan
// Madledger is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

syntax = "proto3";

package protos;

import "common.proto";
import "tx.proto";
import "block.proto";

// Behavior defines the behavior
enum Behavior {
    // Fail right away if not exist
    FAIL_IF_NOT_READY = 0;
    // Return until ready
    RETURN_UNTIL_READY = 1;
}

// Identity defines the identity in the channel
enum Identity {
    MEMBER = 0;
    ADMIN = 1;
    OUTSIDER = 2;
}

// The services that orderers should provide
service Orderer{
    rpc FetchBlock(FetchBlockRequest) returns (Block) {}
    rpc ListChannels(ListChannelsRequest) returns(ChannelInfos) {}
    rpc CreateChannel(CreateChannelRequest) returns (ChannelInfo){}
    rpc AddTx(AddTxRequest) returns(TxStatus){}
    rpc GetAccountInfo(GetAccountInfoRequest) returns (AccountInfo) {}
    rpc GetTxStatus(GetTxStatusRequest) returns (TxStatus){}
}

// However, this is not contains sig now, but this is necessary
// if we want to verify the permission.
// TODO: add sig to identity.
message FetchBlockRequest {
    string ChannelID = 1;
    uint64 Number = 2;
    Behavior Behavior = 3;
}

// TODO: This should contain signature.
message ListChannelsRequest {
    // If system channel are included
    bool System = 1;
    bytes PK = 2;
    int32 Algo = 3;
}

// ChannelInfos contains ChannelInfo
message ChannelInfos {
    repeated ChannelInfo Channels = 1;
}

// ChannelInfo includes some infomations of a channel
message ChannelInfo {
    string ChannelID = 1;
    uint64 BlockSize = 2;
    Identity Identity = 3; 
}

// CreateChannelRequest include a special tx which create a channel.
message CreateChannelRequest {
    Tx Tx = 1;
}

// CreateChannelTxPayload is the payload of create channel tx
message CreateChannelTxPayload {
    string ChannelID = 1;
}

message AddTxRequest {
    Tx Tx = 1;
}

// TxStatus include nothing now.
message TxStatus {
    string Err = 1;
    uint64 BlockNumber = 2;
    int32 BlockIndex = 3;
    bytes Output = 4;
    string ContractAddress = 5;
}

// Peer provides nothing now.
service Peer {
    rpc GetTxStatus(GetTxStatusRequest) returns (TxStatus){}
    rpc ListTxHistory(ListTxHistoryRequest) returns(TxHistory){}
}

message GetTxStatusRequest {
    string ChannelID = 1;
    string TxID = 2;
    Behavior Behavior = 3;
}

message ListTxHistoryRequest {
    bytes Address = 1;
}

// TxHistory includes all txs
message TxHistory {
    // repeated string Txs = 1;
    map<string, StringList> Txs = 1;
}

message GetAccountInfoRequest {
    bytes Address = 1;
}

message AccountInfo {
    uint64 Balance = 1;
}