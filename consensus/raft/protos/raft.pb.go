// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NodeInfo is the necessacy info of a raft node
type NodeInfo struct {
	// ID is the ID of node, maybe the address of raft service, or something else like public key
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// The url of node, maybe ip or domain
	URL string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	// The port of blockchain, and other port could be caculated from the chain port
	ChainPort            int32    `protobuf:"varint,3,opt,name=ChainPort,proto3" json:"ChainPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_661a4debbb6bad01, []int{0}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (dst *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(dst, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *NodeInfo) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *NodeInfo) GetChainPort() int32 {
	if m != nil {
		return m.ChainPort
	}
	return 0
}

// AddNodeResponse is the response of AddNode
type AddNodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNodeResponse) Reset()         { *m = AddNodeResponse{} }
func (m *AddNodeResponse) String() string { return proto.CompactTextString(m) }
func (*AddNodeResponse) ProtoMessage()    {}
func (*AddNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_661a4debbb6bad01, []int{1}
}
func (m *AddNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNodeResponse.Unmarshal(m, b)
}
func (m *AddNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNodeResponse.Marshal(b, m, deterministic)
}
func (dst *AddNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeResponse.Merge(dst, src)
}
func (m *AddNodeResponse) XXX_Size() int {
	return xxx_messageInfo_AddNodeResponse.Size(m)
}
func (m *AddNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeResponse proto.InternalMessageInfo

// RemoveNodeResponse is the response of RemoveNode
type RemoveNodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveNodeResponse) Reset()         { *m = RemoveNodeResponse{} }
func (m *RemoveNodeResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveNodeResponse) ProtoMessage()    {}
func (*RemoveNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_661a4debbb6bad01, []int{2}
}
func (m *RemoveNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveNodeResponse.Unmarshal(m, b)
}
func (m *RemoveNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveNodeResponse.Marshal(b, m, deterministic)
}
func (dst *RemoveNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNodeResponse.Merge(dst, src)
}
func (m *RemoveNodeResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveNodeResponse.Size(m)
}
func (m *RemoveNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNodeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NodeInfo)(nil), "protos.NodeInfo")
	proto.RegisterType((*AddNodeResponse)(nil), "protos.AddNodeResponse")
	proto.RegisterType((*RemoveNodeResponse)(nil), "protos.RemoveNodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_raft_661a4debbb6bad01) }

var fileDescriptor_raft_661a4debbb6bad01 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4a, 0x4c, 0x2b,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0x5e, 0x5c, 0x1c, 0x7e,
	0xf9, 0x29, 0xa9, 0x9e, 0x79, 0x69, 0xf9, 0x42, 0x7c, 0x5c, 0x4c, 0x9e, 0x2e, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x2c, 0x41, 0x4c, 0x9e, 0x2e, 0x42, 0x02, 0x5c, 0xcc, 0xa1, 0x41, 0x3e, 0x12, 0x4c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x90, 0x0c, 0x17, 0xa7, 0x73, 0x46, 0x62, 0x66, 0x5e,
	0x40, 0x7e, 0x51, 0x89, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x42, 0x40, 0x49, 0x90, 0x8b,
	0xdf, 0x31, 0x25, 0x05, 0x64, 0x5c, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x92, 0x08,
	0x97, 0x50, 0x50, 0x6a, 0x6e, 0x7e, 0x59, 0x2a, 0xb2, 0xa8, 0x11, 0x1b, 0x17, 0x4b, 0x50, 0x62,
	0x5a, 0x49, 0x12, 0xc4, 0x11, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x61, 0x15, 0x6d,
	0x99, 0x00, 0x00, 0x00,
}
